                      Mini-projet 1 : solveur DPLL récursif
                             fichier RENDU
                       (à remplir obligatoirement)

**Un mini-projet sans fichier RENDU rempli ne recevra pas de note.**

Date limite: 28 octobre 2022, 23h59

Identité
--------
Nombre de binôme: 64
Nom, prénom 1: Cartigny Julien
Nom, prénom 2: Ung Steven


Questions sur votre code
------------------------
0. Avez-vous testé que `make dpll` s'exécute sans erreurs ou warnings,
   et que ensuite `./dpll sudoku-4x4.cnf` donne la réponse attendue (voir
   fichier README) ?

Le programme compile et s'éxécute sans erreurs et `./dpll sudoku-4x4.cnf` donne bien les mêmes réponse que dans le fichier README.

---

1. Avez-vous utilisé la fonction `filter_map` (donné dans dpll.ml)
   dans votre implémentation de `simplifie` ? 
   - Si oui, expliquez en quelques phrases en français comment vous
     l'avez utilisée.
   - Si non, expliquez en quelques phrases en français comment
     fonctionne votre implémentation de `simplifie`.

Nous n'avons pas utilisé la fonction `filter_map`.
La fonction itère sur chaque clauses dans l'ensemble des clauses
Pour chaque clause la fonction applique rmFrmClause qui:
   - si l'opposé de l est présent
     enlève l de la clause et la retourne
   - si l est présent
     lève une exception `Vide`
Si la fonction rmFrmClause renvoie l'exception `Vide` on enlève
la clause sinon on continue en gardant la clause modifiée (on non)
par rmFrmClause

---

2. Pour l'implémentation de `unitaire`, quelles sont les fonctions
   auxiliaires que vous avez utilisées et/ou écrites ? (Par une
   fonction auxiliaire, on entend ici soit une fonction d'une
   bibliothèque, par exemple des fonctions comme `List.length`,
   `List.rev_append`, ou une fonction `aux_unitaire` que vous avez
   écrite vous-mêmes.) Expliquez en quelques phrases en français
   comment ces fonctions auxiliaires sont utilisées dans votre
   implémentation de la fonction `unitaire`.

Des fonctions auxiliaires ne sont pas utilisées pour `unitaire`.
Un match de la clause abvec [l] suffit.

---

3. Pour l'implémentation de `pur`, quelles sont les fonctions
   auxiliaires que vous avez utilisées et/ou écrites ?  Expliquez en
   quelques phrases en français comment ces fonctions auxiliaires sont
   utilisées dans votre implémentation de la fonction `pur`.

aplatir_list ll : transforme la liste en 2D ll en liste à 1 dimension
pur_rec l p : prend en paramètre une liste et une liste vide et renvoi un élément pur si il y en a et une exception sinon.

Pour commencer on applati la liste des clause en une liste à une dimension (aplatir_list). 
pur_rec traverse la liste en stockant les littéraux traversé et leur négatif dans 'p' et vérifi que le négatif du littéral soit dans la liste, si c'est le cas on continu sinon on renvoi le littérale.

---

4. Donnez un exemple d'une formule pour laquelle les deux fonctions
   `solveur_split` et `solveur_dpll_rec` ont un comportement
   différent, et expliquez les différences entre ces deux fonctions.

**à remplir**

---

5. Avez-vous d'autres remarques sur votre rendu ? (question optionnelle)

Une fonction contains à été écrite mais n'est pas utilisée.
contains : int -> int list -> bool
   renvoi true si le litéral l est dans la clause en négatif ou positif
   et false sinon

---

--fin du fichier RENDU--